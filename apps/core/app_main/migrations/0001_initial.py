# Generated by Django 5.1.6 on 2025-05-03 15:25

import apps.core.app_main.models.downloads
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AppMainSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('nb_max_modifs', 'Nombre max de modifications sauvegardées')], max_length=255, unique=True)),
                ('value', models.IntegerField(default=10)),
            ],
        ),
        migrations.CreateModel(
            name='DynamicPagePattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50, unique=True, verbose_name='Catégorie')),
                ('pattern', models.CharField(max_length=255, verbose_name="Pattern d'URL")),
                ('display_format', models.CharField(help_text="Utilisez {name} pour insérer le vrai nom. Exemple: '{name} / Discographie'", max_length=255, verbose_name="Format d'affichage")),
                ('real_name_field', models.CharField(blank=True, help_text="Exemple: 'Artiste.name' pour récupérer le vrai nom de l'artiste", max_length=100, null=True, verbose_name='Champ du vrai nom')),
            ],
            options={
                'verbose_name': 'Pattern de page dynamique',
                'verbose_name_plural': 'Pages dynamiques - URLS',
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='DownloadableFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Nom du fichier')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('file', models.FileField(upload_to=apps.core.app_main.models.downloads.upload_to, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['csv', 'docx', 'jpg', 'mp3', 'pdf', 'png', 'xlsx', 'zip'])], verbose_name='Fichier')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.core.app_main.models.downloads.upload_image, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['gif', 'jpg', 'png'])], verbose_name='Image')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout")),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de téléchargements')),
            ],
            options={
                'verbose_name': 'Fichier téléchargeable',
                'verbose_name_plural': 'Téléchargements - Fichiers',
                'ordering': ['-uploaded_at'],
                'indexes': [models.Index(fields=['download_count'], name='app_main_do_downloa_8cb900_idx')],
            },
        ),
        migrations.CreateModel(
            name='DownloadLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('downloaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Date du téléchargement')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='app_main.downloadablefile')),
            ],
            options={
                'verbose_name': 'Historique des téléchargements',
                'verbose_name_plural': 'Téléchargements - Historiques',
                'ordering': ['-downloaded_at'],
            },
        ),
        migrations.CreateModel(
            name='DynamicPageInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_name', models.CharField(max_length=255, unique=True, verbose_name='Nom technique')),
                ('display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom affiché')),
            ],
            options={
                'verbose_name': 'Nom de page dynamique',
                'verbose_name_plural': 'Pages dynamiques - Noms',
                'ordering': ['display_name'],
                'indexes': [models.Index(fields=['page_name'], name='app_main_dy_page_na_8c09e0_idx')],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Nom du tag')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description du tag')),
                ('access_level', models.IntegerField(choices=[(1, 'public'), (2, 'registered'), (3, 'moderator'), (4, 'admin')], default=1, verbose_name="Niveau d'accès")),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags - Gestion globale',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='app_main_ta_name_b46d91_idx'), models.Index(fields=['slug'], name='app_main_ta_slug_3deb9e_idx')],
            },
        ),
        migrations.CreateModel(
            name='StaticPageMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('category', models.CharField(choices=[('site-info', 'Pages de base'), ('aide', 'Pages Aide/FAQ'), ('mail', 'Pages contact')], default='custom', help_text='Permet de trier les pages selon leur usage', max_length=20, verbose_name='Catégorie')),
                ('content', models.TextField(help_text='Contenu de la page (mise en forme avec TinyMCE).')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_static_pages', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_static_pages', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='static_pages', to='app_main.tag')),
            ],
            options={
                'verbose_name': 'Page statique',
                'verbose_name_plural': 'Pages statiques',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='DynamicPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_name', models.CharField(max_length=255, verbose_name='Nom de la page dynamique')),
                ('display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom affiché')),
                ('page_info', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='app_main.dynamicpageinfo')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dynamic_pages', to='app_main.tag')),
            ],
            options={
                'verbose_name': 'Tag de page dynamique',
                'verbose_name_plural': 'Pages dynamiques - Tags',
                'ordering': ['page_name'],
            },
        ),
        migrations.CreateModel(
            name='TagPageMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('related_tags', models.ManyToManyField(blank=True, related_name='tagged_tag_pages', to='app_main.tag')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='meta', to='app_main.tag')),
            ],
            options={
                'verbose_name': 'Page de tag - métadonnées',
                'verbose_name_plural': 'Pages de tag - métadonnées',
            },
        ),
        migrations.CreateModel(
            name='StaticPageHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modified_at', models.DateTimeField(auto_now_add=True)),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history', to='app_main.staticpagemeta')),
            ],
            options={
                'verbose_name': 'Historique de la page statique',
                'verbose_name_plural': 'Pages statiques - Historiques',
                'ordering': ['-modified_at'],
                'indexes': [models.Index(fields=['modified_at'], name='app_main_st_modifie_fde21c_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='staticpagemeta',
            index=models.Index(fields=['slug'], name='app_main_st_slug_f747b3_idx'),
        ),
        migrations.AddIndex(
            model_name='dynamicpagetag',
            index=models.Index(fields=['page_name'], name='app_main_dy_page_na_4e9df2_idx'),
        ),
        migrations.AddIndex(
            model_name='dynamicpagetag',
            index=models.Index(fields=['tag'], name='app_main_dy_tag_id_e882ed_idx'),
        ),
    ]
