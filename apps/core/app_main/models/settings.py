from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.core.cache import cache

class AppMainSettings(models.Model):
    """
    Stocke les param√®tres globaux de l'application.
    """
    PARAMETER_CHOICES = (
        ("nb_max_modifs", "Nombre max de modifications sauvegard√©es"),
    )
    
    def save(self, *args, **kwargs):
        """
        Sauvegarde le param√®tre et met √† jour le cache.
        """
        update_cache = kwargs.pop("update_cache", True)  # üîπ Extrait update_cache, True par d√©faut

        super().save(*args, **kwargs)  # üîπ Sauvegarde sans probl√®me

        if update_cache:  # üîπ Met √† jour le cache seulement si demand√©
            cache.set(f"app_main_setting_{self.name}", self.value, timeout=3600)

    name = models.CharField(max_length=255, unique=True, choices=PARAMETER_CHOICES)
    value = models.IntegerField(default=10)

    @staticmethod
    def get_value(param_name, default=None):
        """
        R√©cup√®re la valeur d'un param√®tre global avec mise en cache.
        """
        cache_key = f"app_main_setting_{param_name}"
        value = cache.get(cache_key)

        if value is None:  # Si la valeur n'est pas en cache, on la r√©cup√®re en base
            param = AppMainSettings.objects.filter(name=param_name).first()
            value = param.value if param else default
            cache.set(cache_key, value, timeout=3600)  # Stocke la valeur en cache pendant 1h

        return value

    def __str__(self):
        return f"{self.name}: {self.value}"

@receiver(post_save, sender=AppMainSettings)
def update_cache_on_save(sender, instance, **kwargs):
    """
    Met √† jour le cache √† chaque sauvegarde d'un param√®tre.
    """
    cache.set(f"app_main_setting_{instance.name}", instance.value, timeout=3600)
