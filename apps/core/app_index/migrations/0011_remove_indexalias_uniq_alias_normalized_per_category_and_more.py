# Generated by Django 5.1.6 on 2025-08-24 21:20
from django.db import migrations, models

def drop_unique_alias_norm_per_category(apps, schema_editor):
    """
    Supprime l'ancien index/contrainte UNIQUE sur (alias_normalized, category_id),
    quel que soit son nom effectif dans MySQL.
    """
    with schema_editor.connection.cursor() as cursor:
        cursor.execute("SHOW INDEX FROM app_index_indexalias;")
        rows = cursor.fetchall()
        # Map colonnes
        cols = [c[0] for c in cursor.description]
        idx_keyname = cols.index("Key_name")
        idx_non_unique = cols.index("Non_unique")
        idx_seq = cols.index("Seq_in_index")
        idx_col = cols.index("Column_name")

    # Regroupe par nom d'index
    indexes = {}
    for r in rows:
        key = r[idx_keyname]
        non_unique = r[idx_non_unique]
        colname = r[idx_col]
        seq = r[idx_seq]
        if non_unique == 0:  # UNIQUE seulement
            indexes.setdefault(key, [])
            indexes[key].append((seq, colname))

    # Cherche un unique exactement sur {alias_normalized, category_id}
    target = {"alias_normalized", "category_id"}
    to_drop = []
    for key, cols_list in indexes.items():
        ordered = [c for _, c in sorted(cols_list, key=lambda t: t[0])]
        if set(ordered) == target and len(ordered) == 2:
            to_drop.append(key)

    # Drop tous les index correspondants (sécurité)
    with schema_editor.connection.cursor() as cursor:
        for key in to_drop:
            cursor.execute(f"ALTER TABLE app_index_indexalias DROP INDEX `{key}`;")

def noop(*args, **kwargs):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('app_index', '0010_indexalias_is_listed'),
    ]

    operations = [
        # 1) Supprime dynamiquement l'ancien UNIQUE (alias_normalized, category_id)
        migrations.RunPython(drop_unique_alias_norm_per_category, reverse_code=noop),

        # 2) Ajoute l’unicité GLOBALE sur alias_normalized
        migrations.AddConstraint(
            model_name='indexalias',
            constraint=models.UniqueConstraint(
                fields=('alias_normalized',),
                name='uniq_alias_normalized_global',
            ),
        ),
    ]

